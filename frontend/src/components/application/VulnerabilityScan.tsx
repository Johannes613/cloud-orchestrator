import { useState } from 'react';
import { Box, Typography, Button, Card, CardContent, Chip, LinearProgress } from '@mui/material';
import { Shield, AlertTriangle, CheckCircle, Clock } from 'lucide-react';
import VulnerabilityTable from './VulnerabilityTable';

const VulnerabilityScan: React.FC = () => {
    const [scanStatus, setScanStatus] = useState<'idle' | 'scanning' | 'completed'>('idle');
    const [scanProgress, setScanProgress] = useState(0);

    const handleStartScan = () => {
        setScanStatus('scanning');
        setScanProgress(0);

        const interval = setInterval(() => {
            setScanProgress(prev => {
                if (prev >= 100) {
                    clearInterval(interval);
                    setScanStatus('completed');
                    return 100;
                }
                return prev + 10;
            });
        }, 500);
    };

    const mockVulnerabilityData = [
        {
            id: '1',
            name: 'CVE-2023-1234',
            severity: 'High',
            description: 'SQL injection vulnerability in database queries',
            status: 'Open',
            discovered: '2024-01-10',
            affected: 'database'
        },
        {
            id: '2',
            name: 'CVE-2023-5678',
            severity: 'Medium',
            description: 'Authentication bypass vulnerability',
            status: 'Open',
            discovered: '2024-01-12',
            affected: 'auth-service'
        },
        {
            id: '3',
            name: 'CVE-2023-9012',
            severity: 'Critical',
            description: 'Remote code execution vulnerability',
            status: 'Open',
            discovered: '2024-01-15',
            affected: 'data-processor'
        }
    ];

    const getStatusIcon = (status: string) => {
        switch (status) {
            case 'scanning':
                return <Clock size={20} />;
            case 'completed':
                return <CheckCircle size={20} />;
            default:
                return <Shield size={20} />;
        }
    };

    const getStatusColor = (status: string) => {
        switch (status) {
            case 'scanning':
                return 'warning';
            case 'completed':
                return 'success';
            default:
                return 'default';
        }
    };

    return (
        <Box sx={{ padding: 3 }}>
            <div className="d-flex justify-content-between align-items-center mb-3">
                <Typography variant="h6">Vulnerability Scan</Typography>
                <Button
                    variant="contained"
                    startIcon={<Shield size={16} />}
                    onClick={handleStartScan}
                    disabled={scanStatus === 'scanning'}
                >
                    {scanStatus === 'scanning' ? 'Scanning...' : 'Start Scan'}
                </Button>
            </div>

            {/* Bootstrap Grid Cards */}
            <div className="row mb-3">
                <div className="col-md-4 col-12 mb-3">
                    <Card>
                        <CardContent>
                            <div className="d-flex align-items-center gap-2 mb-2">
                                {getStatusIcon(scanStatus)}
                                <Typography variant="h6">Scan Status</Typography>
                            </div>
                            <Chip
                                label={
                                    scanStatus === 'scanning'
                                        ? 'In Progress'
                                        : scanStatus === 'completed'
                                        ? 'Completed'
                                        : 'Not Started'
                                }
                                color={getStatusColor(scanStatus) as any}
                                size="small"
                            />
                            {scanStatus === 'scanning' && (
                                <Box mt={2}>
                                    <LinearProgress variant="determinate" value={scanProgress} />
                                    <Typography variant="caption" color="text.secondary">
                                        {scanProgress}% complete
                                    </Typography>
                                </Box>
                            )}
                        </CardContent>
                    </Card>
                </div>

                <div className="col-md-4 col-12 mb-3">
                    <Card>
                        <CardContent>
                            <div className="d-flex align-items-center gap-2 mb-2">
                                <AlertTriangle size={20} />
                                <Typography variant="h6">Vulnerabilities Found</Typography>
                            </div>
                            <Typography variant="h4" color="error.main">
                                {scanStatus === 'completed' ? mockVulnerabilityData.length : 0}
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                                Total vulnerabilities detected
                            </Typography>
                        </CardContent>
                    </Card>
                </div>

                <div className="col-md-4 col-12 mb-3">
                    <Card>
                        <CardContent>
                            <div className="d-flex align-items-center gap-2 mb-2">
                                <CheckCircle size={20} />
                                <Typography variant="h6">Last Scan</Typography>
                            </div>
                            <Typography variant="body2" color="text.secondary">
                                {scanStatus === 'completed' ? new Date().toLocaleString() : 'Never'}
                            </Typography>
                        </CardContent>
                    </Card>
                </div>
            </div>

            {/* Table */}
            {scanStatus === 'completed' && <VulnerabilityTable data={mockVulnerabilityData} />}
        </Box>
    );
};

export default VulnerabilityScan;
